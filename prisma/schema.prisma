generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("NEXT_PUBLIC_AZURE_SQL")
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String   @unique(map: "Account_userId_key")
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  createdAt                DateTime @default(now())
  updatedAt                DateTime
  user                     User     @relation(fields: [userId], references: [id], map: "Account_userId_fkey")

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
}

model Annotation {
  id             String  @id  @default(cuid())
  annotationName String  @unique(map: "Annotation_annotationName_key")
  description    String?
  modelName      String
  x              Int
  y              Int
  z              Int
  model          Model   @relation(fields: [modelName], references: [name], map: "Annotation_modelName_fkey")

  @@index([modelName], map: "Annotation_modelName_fkey")
}

model Model {
  id         String       @id @default(cuid())
  name       String       @unique(map: "Model_name_key")
  objFile    String
  mtlFile    String
  txtFile    String
  ownerEmail String?
  annotation Annotation[]
  user       User?        @relation(fields: [ownerEmail], references: [email], map: "Model_ownerEmail_fkey")

  @@index([ownerEmail], map: "Model_ownerEmail_fkey")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique(map: "PasswordResetToken_token_key")
  expires DateTime

  @@unique([email, token], map: "PasswordResetToken_email_token_key")
}

model User {
  id            String    @id  @default(cuid())
  name          String?
  username      String?   @unique(map: "User_username_key")
  email         String?   @unique(map: "User_email_key")
  emailVerified DateTime?
  image         String?
  password      String?
  role          String @default("USER")
  account       Account?
  model         Model[]
}

model VerificationToken {
  id      String   @id  @default(cuid())
  email   String
  token   String   @unique(map: "VerificationToken_token_key")
  expires DateTime

  @@unique([email, token], map: "VerificationToken_email_token_key")
}


